name: Build

on: push

jobs:
  build_app:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: "yarn"

      - name: Register yarn 1.x cache folder
        id: yarn-cache-folder
        shell: bash
        run: |
          echo "path=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Setup yarn 3.x
        run: |
          corepack enable
          corepack prepare yarn@stable --activate
          yarn --version

      - name: Install packages
        env:
          YARN_CACHE_FOLDER: ${{ steps.yarn-cache-folder.outputs.path }}
        run: yarn install --immutable

      - name: Check format
        if: matrix.os == 'ubuntu-latest'
        run: npm run format:ci

      - name: Run linter
        if: matrix.os == 'ubuntu-latest'
        run: npm run lint

      - name: Typecheck code
        if: matrix.os == 'ubuntu-latest'
        run: npm run typecheck

      - name: Run tests
        env:
          CI: true
        run: npm run test

      - name: Build
        run: yarn build

      - name: Deploy Github Pages
        if: matrix.os == 'ubuntu-latest' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build

      - name: Package the electron app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: github.ref == 'refs/heads/main'
        run: yarn electron:package:${{ matrix.electron_cmd }}

      - name: Upload
        uses: actions/upload-artifact@v3
        if: github.ref == 'refs/heads/main'
        with:
          name: app_dist_${{ matrix.electron_cmd }}
          path: dist/*.(exe|dmg|deb)
          if-no-files-found: error

      # this is needed to ensure that actions/setup-node will pick up yarn cache
      - name: Remove yarn 3.5
        run: corepack disable
